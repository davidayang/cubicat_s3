// Generated by js_api_generator.py
#include <unordered_map>
#include "../graphic_engine/node2d.h"
#include "../graphic_engine/drawable/material.h"
#include "../graphic_engine/scene_manager.h"
#include "../js_binding/js_binding.h"
#include "../graphic_engine/node.h"
#include "../core/message/message_tube.h"
#include "../graphic_engine/drawable/texture.h"
#include "../devices/display.h"
#include "../graphic_engine/drawable/drawable.h"
#include "../devices/wifi.h"
#include "../utils/helper.h"
#include "../graphic_engine/resource_manager.h"
extern std::unordered_map<uint32_t, void*>* g_APIMap;
void sendGlobalMessage(int id, void* msg) {
    MessageDispatcher::sendGlobalMessage(id, msg);
}
void sendLocalMessage(MessageTube* tube, int id, void* msg) {
    MessageDispatcher::sendLocalMessage(tube, id, msg);
}
void Node2D_rotate(Node2D* ptr, float angle) {
    ptr->rotate(angle);
}
void Node2D_setPosition(Node2D* ptr, float x, float y) {
    ptr->setPosition(x, y);
}
void Node2D_setScale(Node2D* ptr, float vec_x, float vec_y) {
    ptr->setScale(Vector2f(vec_x, vec_y));
}
Node2D* SceneManager_createSpriteNode(SceneManager* ptr, Texture* texture_sp, float vec_x, float vec_y, Layer2D layer) {
    return ptr->createSpriteNode(TexturePtr(texture_sp), Vector2f(vec_x, vec_y), layer);
}
Node2D* SceneManager_createQuad(SceneManager* ptr, Texture* texture_sp, float vec_x, float vec_y, Layer2D layer) {
    return ptr->createQuad(TexturePtr(texture_sp), Vector2f(vec_x, vec_y), layer);
}
Node2D* SceneManager_createNode2D(SceneManager* ptr, Layer2D layer) {
    return ptr->createNode2D(layer);
}
Node* SceneManager_getObjectById(SceneManager* ptr, uint32_t id) {
    return ptr->getObjectById(id);
}
Node* SceneManager_getObjectByName(SceneManager* ptr, const string& name) {
    return ptr->getObjectByName(name);
}
void SceneManager_deleteObject(SceneManager* ptr, uint32_t id) {
    ptr->deleteObject(id);
}
void SceneManager_addNode(SceneManager* ptr, Node* node_sp) {
    ptr->addNode(NodePtr(node_sp));
}
void Node_setParent(Node* ptr, Node* parent) {
    ptr->setParent(parent);
}
void Node_setName(Node* ptr, const string& name) {
    ptr->setName(name);
}
void Node_setVisible(Node* ptr, bool visible) {
    ptr->setVisible(visible);
}
void Node_setScale(Node* ptr, float s) {
    ptr->setScale(s);
}
Drawable* Node_getDrawable(Node* ptr, uint32_t index) {
    return ptr->getDrawable(index);
}
Texture* ResourceManager_loadTexture(ResourceManager* ptr, char* name, bool fromFlash) {
    return ptr->loadTexture(name, fromFlash);
}
void ResourceManager_removeTexture(ResourceManager* ptr, char* name) {
    ptr->removeTexture(name);
}
Texture* ResourceManager_getTexture(ResourceManager* ptr, char* name) {
    return ptr->getTexture(name);
}
Material* Drawable_materialPtr(Drawable* ptr) {
    return ptr->materialPtr();
}
void Material_setTexture(Material* ptr, Texture* texture_sp) {
    ptr->setTexture(TexturePtr(texture_sp));
}
Texture* Material_texturePtr(Material* ptr) {
    return ptr->texturePtr();
}
void Material_setColor(Material* ptr, uint16_t color) {
    ptr->setColor(color);
}
void Material_setMask(Material* ptr, bool hasMask) {
    ptr->setMask(hasMask);
}
void Material_setMaskColor(Material* ptr, uint16_t color) {
    ptr->setMaskColor(color);
}
void Material_setEmissive(Material* ptr, float e) {
    ptr->setEmissive(e);
}
void Material_setBlendMode(Material* ptr, BlendMode mode) {
    ptr->setBlendMode(mode);
}
void Material_setBilinearFilter(Material* ptr, bool b) {
    ptr->setBilinearFilter(b);
}
void Material_setTransparent(Material* ptr, bool t) {
    ptr->setTransparent(t);
}
void Texture_setAsSpriteSheet(Texture* ptr, uint16_t row, uint16_t col) {
    ptr->setAsSpriteSheet(row, col);
}
void Texture_setFrame(Texture* ptr, int nth) {
    ptr->setFrame(nth);
}
Texture* Texture_shallowCopy(Texture* ptr) {
    return ptr->shallowCopy();
}
bool connect(char* ssid, char* password) {
    return Wifi::connect(ssid, password);
}
void Display_drawLine(Display* ptr, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint16_t thickness) {
    ptr->drawLine(x1, y1, x2, y2, color, thickness);
}
void Display_drawRect(Display* ptr, int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t color, uint16_t thickness) {
    ptr->drawRect(x, y, w, h, color, thickness);
}
void Display_fillRect(Display* ptr, int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t color) {
    ptr->fillRect(x, y, w, h, color);
}
void Display_fillRoundRect(Display* ptr, int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t color, uint16_t cornerRadius) {
    ptr->fillRoundRect(x, y, w, h, color, cornerRadius);
}
void Display_drawCircle(Display* ptr, int16_t x, int16_t y, uint16_t radius, uint16_t color, uint16_t thickness) {
    ptr->drawCircle(x, y, radius, color, thickness);
}
void Display_fillCircle(Display* ptr, int16_t x, int16_t y, uint16_t radius, uint16_t color) {
    ptr->fillCircle(x, y, radius, color);
}
void Display_fillScreen(Display* ptr, uint16_t color) {
    ptr->fillScreen(color);
}
void Register_CUBICAT_API() {
    std::unordered_map<uint32_t, void*>& apiMap = *g_APIMap;
    apiMap[std::hash<std::string>()("SceneManager_deleteObject")] = (void*)SceneManager_deleteObject;
    apiMap[std::hash<std::string>()("ResourceManager_removeTexture")] = (void*)ResourceManager_removeTexture;
    apiMap[std::hash<std::string>()("connect")] = (void*)connect;
    apiMap[std::hash<std::string>()("Display_drawRect")] = (void*)Display_drawRect;
    apiMap[std::hash<std::string>()("Material_setTransparent")] = (void*)Material_setTransparent;
    apiMap[std::hash<std::string>()("SceneManager_getObjectById")] = (void*)SceneManager_getObjectById;
    apiMap[std::hash<std::string>()("Node_getDrawable")] = (void*)Node_getDrawable;
    apiMap[std::hash<std::string>()("Drawable_materialPtr")] = (void*)Drawable_materialPtr;
    apiMap[std::hash<std::string>()("Display_fillRect")] = (void*)Display_fillRect;
    apiMap[std::hash<std::string>()("Display_drawCircle")] = (void*)Display_drawCircle;
    apiMap[std::hash<std::string>()("Texture_setAsSpriteSheet")] = (void*)Texture_setAsSpriteSheet;
    apiMap[std::hash<std::string>()("ResourceManager_getTexture")] = (void*)ResourceManager_getTexture;
    apiMap[std::hash<std::string>()("Material_setBlendMode")] = (void*)Material_setBlendMode;
    apiMap[std::hash<std::string>()("Material_setMaskColor")] = (void*)Material_setMaskColor;
    apiMap[std::hash<std::string>()("Node_setName")] = (void*)Node_setName;
    apiMap[std::hash<std::string>()("sendLocalMessage")] = (void*)sendLocalMessage;
    apiMap[std::hash<std::string>()("getLCD")] = (void*)getLCD;
    apiMap[std::hash<std::string>()("SceneManager_createSpriteNode")] = (void*)SceneManager_createSpriteNode;
    apiMap[std::hash<std::string>()("Material_setEmissive")] = (void*)Material_setEmissive;
    apiMap[std::hash<std::string>()("getResourceManager")] = (void*)getResourceManager;
    apiMap[std::hash<std::string>()("SceneManager_createQuad")] = (void*)SceneManager_createQuad;
    apiMap[std::hash<std::string>()("Display_fillScreen")] = (void*)Display_fillScreen;
    apiMap[std::hash<std::string>()("Material_texturePtr")] = (void*)Material_texturePtr;
    apiMap[std::hash<std::string>()("Node_setScale")] = (void*)Node_setScale;
    apiMap[std::hash<std::string>()("Node2D_setScale")] = (void*)Node2D_setScale;
    apiMap[std::hash<std::string>()("Node2D_setPosition")] = (void*)Node2D_setPosition;
    apiMap[std::hash<std::string>()("Material_setMask")] = (void*)Material_setMask;
    apiMap[std::hash<std::string>()("Material_setBilinearFilter")] = (void*)Material_setBilinearFilter;
    apiMap[std::hash<std::string>()("Node_setVisible")] = (void*)Node_setVisible;
    apiMap[std::hash<std::string>()("Texture_shallowCopy")] = (void*)Texture_shallowCopy;
    apiMap[std::hash<std::string>()("Display_fillRoundRect")] = (void*)Display_fillRoundRect;
    apiMap[std::hash<std::string>()("Display_fillCircle")] = (void*)Display_fillCircle;
    apiMap[std::hash<std::string>()("Node2D_rotate")] = (void*)Node2D_rotate;
    apiMap[std::hash<std::string>()("Material_setTexture")] = (void*)Material_setTexture;
    apiMap[std::hash<std::string>()("Display_drawLine")] = (void*)Display_drawLine;
    apiMap[std::hash<std::string>()("sendGlobalMessage")] = (void*)sendGlobalMessage;
    apiMap[std::hash<std::string>()("SceneManager_getObjectByName")] = (void*)SceneManager_getObjectByName;
    apiMap[std::hash<std::string>()("ResourceManager_loadTexture")] = (void*)ResourceManager_loadTexture;
    apiMap[std::hash<std::string>()("SceneManager_createNode2D")] = (void*)SceneManager_createNode2D;
    apiMap[std::hash<std::string>()("Material_setColor")] = (void*)Material_setColor;
    apiMap[std::hash<std::string>()("Node_setParent")] = (void*)Node_setParent;
    apiMap[std::hash<std::string>()("getSceneManager")] = (void*)getSceneManager;
    apiMap[std::hash<std::string>()("timeNow")] = (void*)timeNow;
    apiMap[std::hash<std::string>()("SceneManager_addNode")] = (void*)SceneManager_addNode;
    apiMap[std::hash<std::string>()("Texture_setFrame")] = (void*)Texture_setFrame;
}
